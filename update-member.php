<!-- 
    Update Page contains the same form as the registration from in the index page

    We will use the id that we are getting through the URL and use it to grab the wanted record
    then view it in the form fields
-->
<?php 
$title = 'Update Member';

/*
require => can call the file as many times as we need
require_once => can only call the file one time even if we repeat the command
*/
require_once 'templates/header.php';

// for database:
// require_once 'db_config/db_conn.php'; our old/previous code
// Now we can just reference the crud.php file and this file including the rest!
require_once 'db_config/crud.php';

$occupationsObj = $crud->getOccupations(); // This is needed for populating all the occupation titles
/*
The same logic like viewing the member details,
but this time we put the negative condition first then the main code inside the else block:
*/
if (!isset($_GET['id'])) {
    echo "<h2>Member id is not found!</h2>";
}
else {
    // Same logic as show members, getting the value of the ID for the current member
    $id = $_GET['id'];
    // saving the returned array value into a variable "memInfoArr" for "Member Information Array"
    $memInfoArr = $crud->getMemberDetails($id);

    // for testing:
    print_r($memInfoArr);
    /*
    Output:
    Array ( 
        [member_id] => 1 
        [first_name] => Alex 
        [last_name] => Chow 
        [dob] => 1975-06-21 
        [email] => alexchow@pdoprogramming.ca 
        [phone] => 1234567 
        [occupation_id] => 1 
        [name] => Information systems analysts and consultants 
    )
    */

// } // This closing brace has to be moved at the end of the form
?>
<h1>Update Member Information</h1>

 <form method="POST" action="process-update.php">
    <!-- 
        NOTES:
        1- Using the value attribute for each input field to output the value for each column in our database
        2- Adding a hidden input field for the member id:
            a - This field is hidden as it's not necessary to be visible to the user!
                It just contains a random number that auto generated by MySQL using the Auto Increment feature
                to add a unique value for each record
            b- This hidden field is required so we can use its value to (which is the member id)
               to modify/update that specific record only when using the SQL UPDATE statement with WHERE clause
               (refer to my in-class notes for more information)
            c- This "member_id" hidden field value will be added the super global array $_POST as well.
               So we can retrieve its value like the other from fields in the form processing page

        
        MDN Definition:
        <input> elements of type hidden let web developers include data that cannot be seen or modified by users 
        when a form is submitted. 
        For example, the ID of the content that is currently being ordered or edited, or a unique security token. 
        Hidden inputs are completely invisible in the rendered page, 
        and there is no way to make it visible in the page's content.
        
        MDN Example: 
        <input type="hidden" id="postId" name="postId" value="34657">

        Read more (MDN):
        https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/hidden

        To understand clearly the reason behind this hidden field, check the "process-update.php" file
    -->
    <input type="hidden" id="memberId" name="memberId" value="<?php echo $memInfoArr['member_id']; ?>">

    <div class="mb-3">
        <label for="firstname" class="form-label">First Name</label>
        <input type="text" class="form-control" id="firstname" name="firstname" aria-describedby="firstnameHelp"
        value=<?php echo $memInfoArr['first_name']; ?>>
    </div>

    <div class="mb-3">
        <label for="lastname" class="form-label">Last Name</label>
        <input type="text" class="form-control" id="lastname" name="lastname" aria-describedby="lastnameHelp"
        value=<?php echo $memInfoArr['last_name']; ?>>
    </div>

    <div class="mb-3">
        <label for="dob" class="form-label">Date of Birth</label>
        <input type="date" class="form-control" id="dob" name="dob" aria-describedby="dobHelp"
        value=<?php echo $memInfoArr['dob']; ?>>
    </div>

    <div class="mb-3">
        <label for="email" class="form-label">Email address</label>
        <input type="email" class="form-control" id="email" name="email" aria-describedby="emailHelp"
        value=<?php echo $memInfoArr['email']; ?>>
        <div id="emailHelp" class="form-text">We'll never share your email with anyone else.</div>
    </div>

    <div class="mb-3">
        <label for="phone" class="form-label">Phone Number:</label>
        <input type="text" class="form-control" id="phone" name="phone" aria-describedby="phoneHelp"
        value=<?php echo $memInfoArr['phone']; ?>>
        <div id="phoneHelp" class="form-text">We'll never use this phone number to send you any updates.</div>
    </div>

    <div class="mb-3">
        <label for="occupation" class="form-label">Select NOC title(s) that relevant to your Occupation/Job Title (You can select more than one):</label>
        <select class="form-select" id="occupation" name="occupation" multiple aria-label="multiple select example">
            <?php  
                while($row = $occupationsObj->fetch(PDO::FETCH_ASSOC))  { // starting our while loop block
            ?>
               <!-- 
                   The option elements will list all the occupations values in our table
                   But we should highlight (select) the one that related to this member by default,
                   to select any option we can simply use the HTML attribute "selected"
                -->
               
               <option value="<?php echo $row['occupation_id']; ?>"
               <?php    
                /* 
                Checking if:
                    $row['occupation_id'] matching the occupation_id key value for the associative array "memInfoArr"
                    so this specific option will have the attribute "selected"

                    if ($row['occupation_id']==$memInfoArr['occupation_id']) {
                       echo 'selected';
                    }

                    We will use ternary operator:
                    https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary
                */
                echo (($row['occupation_id']==$memInfoArr['occupation_id']) ? 'selected' : '');
               ?>>
                    <?php echo $row['name'] ?>
                </option>            
            <?php
                } // closing the while loop block
            ?>
        </select>
    </div>
    <button type="submit" class="btn btn-primary" name="submit">Update</button>
</form>
<?php
} // the closing for main/first else statement
require_once 'templates/footer.php';
?>

   